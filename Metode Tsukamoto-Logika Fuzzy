{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPxNWqpPGh4EMJFuwM3wQnd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Lustiyana/UTS_AI/blob/main/Metode%20Tsukamoto-Logika%20Fuzzy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-q6ul85wgir"
      },
      "source": [
        "def turun(b,a,x):\n",
        "    if(x<=a):\n",
        "        nilai = 1\n",
        "    elif(x>a and x<b):\n",
        "        nilai = (b-x)/(b-a)\n",
        "    elif(x>=b):\n",
        "        nilai = 0\n",
        "\n",
        "    return nilai\n",
        "\n",
        "def naik(b,a,x):\n",
        "    if(x<=a):\n",
        "        nilai = 0\n",
        "    elif(x>a and x<b):\n",
        "        nilai = (x-a)/(b-a)\n",
        "    elif(x>=b):\n",
        "        nilai = 1\n",
        "\n",
        "    return nilai\n",
        "\n",
        "def agregasi_turun(b,a,alfa):\n",
        "    nilai = b - (alfa*(b-a))\n",
        "    return nilai\n",
        "\n",
        "def agregasi_naik(b,a,alfa):\n",
        "    nilai = alfa*(b-a) + a\n",
        "    return nilai\n",
        "\n"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SfoROdzL4F1D",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7f800438-c8e7-4b94-cd57-c9e439c2ef33"
      },
      "source": [
        "nama_var=[\"permintaan\", \"persediaan\", \"produksi\"]\n",
        "variabel = dict()\n",
        "for i in nama_var:\n",
        "    print(i)\n",
        "    up = int(input(\"naik : \"))\n",
        "    down = int(input(\"turun : \"))\n",
        "    variabel.update({i+\"_naik\":up})\n",
        "    variabel.update({i+\"_turun\":down})"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "permintaan\n",
            "naik : 5000\n",
            "turun : 1000\n",
            "persediaan\n",
            "naik : 600\n",
            "turun : 100\n",
            "produksi\n",
            "naik : 7000\n",
            "turun : 2000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W2usFYCh8pNj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d665d5c-b1bf-4d02-d2ac-c7aa84997759"
      },
      "source": [
        "soal = dict()\n",
        "\n",
        "for i in range(2):\n",
        "    print(\"Diketahui\")\n",
        "    ver = input(\"Nama variabel : \")\n",
        "    val = int(input(\"Nilai : \"))   \n",
        "    soal.update({ver:val})\n",
        "    \n",
        "\n",
        "print(\"Ditanyakan\")\n",
        "dit = input(\"Nama variabel : \")"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Diketahui\n",
            "Nama variabel : permintaan\n",
            "Nilai : 4000\n",
            "Diketahui\n",
            "Nama variabel : persediaan\n",
            "Nilai : 300\n",
            "Ditanyakan\n",
            "Nama variabel : produksi\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "idsknXWr9GNO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0579361f-f3c7-4056-8bfb-91bd91707c37"
      },
      "source": [
        "nk = dict()\n",
        "for i in soal:\n",
        "    up = naik(variabel[i+\"_naik\"],variabel[i+\"_turun\"],soal[i])\n",
        "    down = turun(variabel[i+\"_naik\"],variabel[i+\"_turun\"],soal[i])\n",
        "    nk.update({i+\"_naik\":up})\n",
        "    nk.update({i+\"_turun\":down})\n",
        "\n",
        "print(nk)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'permintaan_naik': 0.75, 'permintaan_turun': 0.25, 'persediaan_naik': 0.4, 'persediaan_turun': 0.6}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LVy3JGRF9Lt3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e7776f4-adb3-4754-b600-76db47d15ea5"
      },
      "source": [
        "alfa = []\n",
        "z = []\n",
        "\n",
        "r = int(input(\"Masukkan jumlah aturan: \"))\n",
        "\n",
        "for i in range(r):\n",
        "    kondi_1 = input(\"Kondisi 1(naik/turun): \")\n",
        "    kondi_2 = input(\"Kondisi 2(naik/turun): \")\n",
        "    kesimpulan = input(\"Kesimpulan(naik/turun): \")\n",
        "    #Fire Strength INTERSEKSI (AND)\n",
        "    a = min(nk[kondi_1],nk[kondi_2]) \n",
        "    alfa.append(a)\n",
        "    if(kesimpulan == \"turun\"):\n",
        "        zz = agregasi_turun(variabel[dit+\"_naik\"],variabel[dit+\"_turun\"],a)\n",
        "    elif(kesimpulan == \"naik\"):\n",
        "        zz = agregasi_naik(variabel[dit+\"_naik\"],variabel[dit+\"_turun\"],a)        \n",
        "    z.append(zz)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Masukkan jumlah aturan: 4\n",
            "Kondisi 1(naik/turun): permintaan_turun\n",
            "Kondisi 2(naik/turun): persediaan_naik\n",
            "Kesimpulan(naik/turun): turun\n",
            "Kondisi 1(naik/turun): permintaan_turun\n",
            "Kondisi 2(naik/turun): persediaan_turun\n",
            "Kesimpulan(naik/turun): turun\n",
            "Kondisi 1(naik/turun): permintaan_naik\n",
            "Kondisi 2(naik/turun): persediaan_naik\n",
            "Kesimpulan(naik/turun): naik\n",
            "Kondisi 1(naik/turun): permintaan_naik\n",
            "Kondisi 2(naik/turun): persediaan_turun\n",
            "Kesimpulan(naik/turun): naik\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pdj2A1pS9S5n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf8b8ad4-9e20-46d5-eefc-4944e6b36fd1"
      },
      "source": [
        "print(alfa)\n",
        "print(z)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.25, 0.25, 0.4, 0.6]\n",
            "[5750.0, 5750.0, 4000.0, 5000.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HMaXNWT-9V8J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98dbb5a6-1ee2-4b88-e61e-db67eb56fa70"
      },
      "source": [
        "df = 0\n",
        "\n",
        "for i in range(len(alfa)):\n",
        "    df += alfa[i]*z[i]\n",
        "\n",
        "defuz = int(df/sum(alfa))\n",
        "\n",
        "print(\"Jadi, nilai \",dit,\" adalah \",defuz)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jadi, nilai  produksi  adalah  4983\n"
          ]
        }
      ]
    }
  ]
}